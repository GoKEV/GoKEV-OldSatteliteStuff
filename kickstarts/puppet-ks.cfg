#version=DEVEL
# System authorization information
auth --useshadow --passalgo=sha256 --kickstart
# Install OS instead of upgrade
install
# Use network installation
url --url="http://satellite.lab/pulp/repos/GoKEV/PROD/RHEL7/content/dist/rhel/server/7/7.3/x86_64/kickstart/"
repo --name="Server-HighAvailability" --baseurl=http://satellite.lab/pulp/repos/GoKEV/PROD/RHEL7/content/dist/rhel/server/7/7.3/x86_64/kickstart//addons/HighAvailability
repo --name="Server-ResilientStorage" --baseurl=http://satellite.lab/pulp/repos/GoKEV/PROD/RHEL7/content/dist/rhel/server/7/7.3/x86_64/kickstart//addons/ResilientStorage
# Use text mode install
text
# Firewall configuration
firewall --enabled --service=ssh
firstboot --disable
ignoredisk --only-use=sda
# Keyboard layouts
# old format: keyboard us
# new format:
keyboard --vckeymap=us --xlayouts=''
# System language
lang en_US.UTF-8

# Network information
network  --bootproto=dhcp --device=00:0c:29:3b:0c:78 --hostname=test.lab
# Reboot after installation
reboot
# Root password
rootpw --iscrypted $5$XPzkUQZt$fCeKCZ3aTNeKv8h9RvtDKFXHA.ITBGnNBjDwHKpb/F4
# SELinux configuration
selinux --enforcing
# System services
services --enabled="chronyd"
# Do not configure the X Window System
skipx
# System timezone
timezone UTC --isUtc
# System bootloader configuration
bootloader --append="nofb quiet splash=quiet crashkernel=auto" --location=mbr --boot-drive=sda
autopart --type=lvm
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --initlabel

%post --nochroot
exec < /dev/tty3 > /dev/tty3
#changing to VT 3 so that we can see whats going on....
/usr/bin/chvt 3
(
cp -va /etc/resolv.conf /mnt/sysimage/etc/resolv.conf
/usr/bin/chvt 1
) 2>&1 | tee /mnt/sysimage/root/install.postnochroot.log
%end

%post
logger "Starting anaconda test.lab postinstall"
exec < /dev/tty3 > /dev/tty3
#changing to VT 3 so that we can see whats going on....
/usr/bin/chvt 3
(










#  interface
real=`ip -o link | grep 00:0c:29:3b:0c:78 | awk '{print $2;}' | sed s/:$//`

# ifcfg files are ignored by NM if their name contains colons so we convert colons to underscore
sanitized_real=$real

cat << EOF > /etc/sysconfig/network-scripts/ifcfg-$sanitized_real
BOOTPROTO="dhcp"
DEVICE=$real
HWADDR="00:0c:29:3b:0c:78"
ONBOOT=yes
PEERDNS=yes
PEERROUTES=yes
EOF




#update local time
echo "updating system time"
/usr/sbin/ntpdate -sub 0.fedora.pool.ntp.org
/usr/sbin/hwclock --systohc


  # add subscription manager
 
  yum -t -y -e 0 install subscription-manager
  rpm -ivh http://satellite.lab/pub/katello-ca-consumer-latest.noarch.rpm
 

  echo "Registering the System"
  subscription-manager register --org="GoKEV" --name="test.lab" --activationkey="RHEL7"

  
    echo "Enabling Satellite Tools Repo"
    echo "DEPRECATED: This may be removed in a future version of Satellite, please add Satellite Tools to your activation key(s)."
    subscription-manager repos --enable=rhel-*-satellite-tools-*-rpms
  

  
    echo "Installing Katello Agent"
    yum -t -y -e 0 install katello-agent
    chkconfig goferd on
  




# update all the base packages from the updates repository
yum -t -y -e 0 update


# SSH keys setup snippet
#
# Parameters:
#
# remote_execution_ssh_keys: public keys to be put in ~/.ssh/authorized_keys
#
# remote_execution_ssh_user: user for which remote_execution_ssh_keys will be
#                            authorized
#
# This template sets up SSH keys in any host so that as long as your public
# SSH key is in remote_execution_ssh_keys, you can SSH into a host.

# A personal recomendation: create a global parameter remote_execution_ssh_keys
# and put your keys there, so that you can access any newly provisioned host
# without having to set up the parameter on every host or host group.






mkdir -p ~root/.ssh

cat << EOF >> ~root/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC28glK9/uHDxONMXHEiUhfQjLZMvJfhbZhg36WSqutbeRdH0oznlz+ohG0hu26f/ClZ25hfgdTJRnX/LZzD37PGUP9TSOjuLWFo2r8JfkJjECAgW+JxE73zx/ZbTvBx16LWUIc2Rg4jLGQcKkwyzsvJLWjMEeg0pJVAcJ9uJqx7R+Fpg1ETFO/np4kAgAs3+CWhqpnepX+ZSin2VLrnhMYH1JNFZklg6TltPiw89xEmmIKA1JFzdNeYMIQM2Do99Ek2ICRlMZrk+pBGRNRWsGUn2U+L/j2pHxran5EMmnjh/jHab3bKj6Wwro4O2jfOkjRpeghyqeANZDu/gV2jYHJ foreman-proxy@satellite
EOF

chmod 700 ~root/.ssh
chmod 600 ~root/.ssh/authorized_keys
chown -R root: ~root/.ssh

# Restore SELinux context with restorecon, if it's available:
command -v restorecon && restorecon -RvF ~root/.ssh || true





# and add the puppet package
yum -t -y -e 0 install puppet

echo "Configuring puppet"
cat > /etc/puppet/puppet.conf << EOF

[main]
vardir = /var/lib/puppet
logdir = /var/log/puppet
rundir = /var/run/puppet
ssldir = \$vardir/ssl

[agent]
pluginsync      = true
report          = true
ignoreschedules = true
daemon          = false
ca_server       = satellite.lab
certname        = test.lab
environment     = PuppetProd
server          = satellite.lab

EOF

# Setup puppet to run on system reboot
/sbin/chkconfig --level 345 puppet on

/usr/bin/puppet agent --config /etc/puppet/puppet.conf -o --tags no_such_tag --server satellite.lab --no-daemonize

sync

# Inform the build system that we are done.
echo "Informing Foreman that we are built"
wget -q -O /dev/null --no-check-certificate http://satellite.lab/unattended/built?token=798ca94a-0f8a-4e58-bc40-e9e59e9f115e
) 2>&1 | tee /root/install.post.log
exit 0

%end

%packages --ignoremissing
@Core
chrony
dhclient
kexec-tools
ntp
wget
yum

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end
