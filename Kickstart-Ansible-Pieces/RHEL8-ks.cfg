#version=RHEL8
ignoredisk --only-use=sda
# System bootloader configuration
bootloader --append="rhgb quiet" --location=mbr --boot-drive=sda
autopart --type=lvm
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --initlabel
# Reboot after installation
reboot
# Use text mode install
text
# Keyboard layouts
# old format: keyboard us
# new format:
keyboard --vckeymap=us --xlayouts=''
# System language
lang en_US.UTF-8

repo --name="AppStream" --baseurl=http://saturn.demo/pub/distros/RHEL8/AppStream
# Use network installation
url --url="http://saturn.demo/pub/distros/RHEL8/"
# Root password is 'redhat'
rootpw --iscrypted $1$lp6AWX65$GdSNp6XN5GyimMlo30I7b/
# System authorization information
auth --passalgo=sha512 --useshadow
# SELinux configuration
selinux --disabled
firstboot --disable
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd"
# System timezone
timezone America/Chicago --isUtc

%packages
@^minimal-environment
kexec-tools
nano
perl
wget

%end

%addon com_redhat_kdump --disable --reserve-mb='128'

%end

%post
sudo systemctl mask kdump.service
%end

%post
### Lay down your SSH publickey(s) to allow Ansible Tower to provision as soon as we finish here.
mkdir -p ~root/.ssh

cat << EOF >> ~root/.ssh/authorized_keys
## Tower
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCk4lMHzmtAEMHgqDDKXdT2fA7D0Fk2F/9O8O+X5kAF8LuOgc41zLWirDR7CJuDQOk/EmOLQMPZVO0uCetY14es/dRps+W+5OdW6IDPynWQwU6Ys/OpeKXLhRZeAXGWTZ1Jq0+AalLEoj7REe37ZK6YLAUJUMiojKRsPAgm3y7GIbaGqH1RmV4DdFW0L6ejsttCQSirNn3G7Q1YHhsz2Iz21HGPta3RPP5aaGsWxOXqpu++Nc9ggEGgUdCOfg4v2XZgCcguaoLZKl+mkE9e3dFNj+RSFA7vLdfpl1QjRbOJcMXgGmaQ2CeJbayn5fzIEj1MAiD+tqGbljxdML/Kf8cZ10D+lZPqDZSNBg2+MGPE4Bk/wUtx6EmTlmHBoBv96kEIi0m+Sz3PiAbyQjAf2oLL1y1RPZMy47rP/xOaSaA0NtwQvhvTnZ+Jvk9mt4Xe4rvg7gN6fRVSW2UKLeVkT+p60N/aczU9JUlYQSBVfLmH8Sf4s8VQBqiuE92+/MLIpwE= root@demotower

## Kev MacBook
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC4jbU3S3K9qnYSJfjQYhNRbY0STHEoiqNT/KeLSMFJx66F1xa0hSCCNTPvJv1p5zvLW/mv7nk9Kl9AHk2BB7p3A3CWt3vt9hijDEtvLeyRf+qGcPSmzoaNXLxSz+KDFmYjsvX2G7AztkRm0HHTK3ZAy+Miadc0FX6f0PYIHyoMbU68XxnPuT0JJgPtGRwomuY46KUxqtJP6uSDMtM4KUdcxkLaHMBtiXtjVkSa6svhYEKXnuUU1HLUtvg6EpH4nZu9MJSdfGsPp4QqT/GsUDoYzrBYWY8IS3JOGbMt2HBYpmqJIJZ90Fa5ERhEkJnzn5T19szRZg11NU/3UmlSpJJb kev@redhat.com

EOF

chmod 700 ~root/.ssh
chmod 600 ~root/.ssh/authorized_keys
chown -R root: ~root/.ssh

### Grab the firstboot Perl script that will phone home to Ansible Tower

mkdir /admin/
wget -O /admin/API_Add_Launch_Delete.pl http://saturn.demo/pub/kickstarts/API_Add_Launch_Delete.pl
chmod +x /admin/API_Add_Launch_Delete.pl

### Lay down the one-time service that will perform the Ansible Tower API call
cat << EOF > /usr/lib/systemd/system/tower-provision-temp.service
[Unit]
Description=Ansible Tower API Call to ProvisionTemp JT
Wants=network-online.target
After=network-online.target

[Service]
Type=oneshot

ExecStart=/admin/API_Add_Launch_Delete.pl
ExecStartPost=/usr/bin/systemctl disable tower-provision-temp

[Install]
WantedBy=multi-user.target

EOF

### And this sets the service as enabled, to run next boot
systemctl enable tower-provision-temp.service

%end

